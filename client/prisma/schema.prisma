generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("Tasks")
  comments      Comment[] @relation("Comments")
}

model Task {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String?   @db.Text
  creater   User      @relation(name: "Tasks", fields: [createrId], references: [id])
  createrId String
  comments  Comment[] @relation("task_comments")

  @@unique([title, createrId])
}

model Comment {
  id      Int     @id @default(autoincrement())
  content String?

  task   Task @relation(name: "task_comments", fields: [taskId], references: [id])
  taskId Int

  creater   User   @relation(name: "Comments", fields: [createrId], references: [id])
  createrId String
}
